1.单一职责原则：即一个类而言，仅有一个引起它变化的原因。
软件设计: 发现职责并把职责分离；比如游戏开发（俄罗斯方块），游戏的逻辑为单独的类，因为只有游戏逻辑更改时，它才会改变。

2.开放封闭原则：不可修改但是可以扩展。软件实体（类，模块，函数）可以扩展不可修改。对于扩展是开放的，对于修改是封闭的。面对需求的改变可以保持相对稳定，使得不断退出新的版本。
面对新需求，通过增加新代码而不是修改源代码。


3.依赖倒转原则：抽象不应该依赖于细节，细节依赖于抽象；即针对接口编程，不要针对实现编程。比如：CPU/内存条的接口，接口都一致，可自己选择想要的品牌；假如针对实现编程，CPU要对应到哪个具体品牌的主板。
高层模块不依赖于低层模块。两者都依赖于抽象。
抽象不应该依赖于细节，细节依赖于抽象。


4.里氏代换原则：如果一个软件实体使用的是一个父类的话，那么一定适用其子类，察觉不出父类对象与子类对象的区别。即将父类都替换成子类，程序行为无变化。子类型必须能替换父类型。




