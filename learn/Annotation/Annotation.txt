Annotation 注解

大致的可以理解成一个标签，为某个事物附加额外的说明或者解释

public @interface TestAnnotation{}  注解的定义
注解的应用
@TestAnnotation
public class Test{}


元注解：理解为一种特殊的标签，为其他标签进行解释说明；是一种基本注解

元注解有：@Retention @Documented @Target @Inherited @Repeatable五种
1.@Retention 保留期（生命周期），说明注解的存活时间
	-RetentionPolicy.SOURCE 注解只在源码阶段保留，编译时被丢	     弃忽视。
	-RetentionPolicy.CLASS 注解只被保留到编译进行的时候，不加     载到JVM
	-RetentionPolicy.RUNTIME 保留到程序运行时，加载到JVM中
@Retetion(RetetionPolicy.RUNTIME)
public @interface TestAnnotation{}

2.@Documented 将注解中的元素包含到javadoc中

3.@Target 指定注解应用的目标，当一个注解指定@Target时就限定了运用的场景
	-ElementType.ANNOTATION_TYPE 可以给注解进行注解
	-ElementType.CONSTRUCTOR 给构造方法进行注解
	-ElementType.FIELD 给属性进行注解
	-ElementType.LOCAL_VARIABLE 给局部变量进行注解
	-ElementType.METHOD 给方法进行注解
	-ElementType.PACKAGE 给包进行注解
	-ElementType.PARAMETER 给方法内的参数进行注解
	-ElementType.TYPE 给一个类型进行注解,类/接口/枚举等

4.@Inherited 继承的意思。它并不是说注解本身可以被继承，而是说一个超类被@Inherited注解过的注解进行注解时，如果它的子类没有被其他注解所注解，那么子类就继承了超类的注解

例子：
@Inherited
@Retetion(RetntionPolicy.RUNTIME)
public @interface TestAnnotation{}

@TestAnnotation
class Parent{}

class Children extend Parent{}

注解 TestAnnotation被 @Inherited 修饰，之后类 Parent 被 TestAnnotation 注解，类 Children  继承 Parent,类 Children 也拥有 Test 这个注解。


5.@Repeatable 可重复的意思。什么样的注解会多次应用呢？通常是注解的值可以同时取多个。

例子：一个人可以是产品也可以是程序员还可以是驻唱
@interface Persons{
	Person[] value();
}

@Repetable(Persons.class)
@interface Person{
	String role default "";
}

@Person(role="singer")   //给注解的role属性赋值为singer
@Person(role="PM")
@Person(role="coder")
public class Man{}

@Repetable注解了Person。后面括号的类相当于注解容器（可以存放其他注解的注解），按照规定内部必须有一个value的属性，属性类型是一个被@Repetable主借过的注解数组。 即Persons是一个总标签，上面贴满各种各样的Person标签。




Java 预置的注解

1.@Deprecated 标记过时的元素，编译器在编译阶段遇到这个注解时会发出提醒警告

2.@Override 复写父类中的被@Override修饰的方法

3.@SuppressWarnings 阻止警告，@Deprecated标记过的方法会发出警告，我们可以使用这个注解忽略警告

4.@SafeVarargs 参数安全类型注解。提醒开发者不要用参数做一些不安全的操作

5.@FunctionalInterface 函数式接口注解。Runnable就是一个被@FunctionalInterface修饰的接口。

函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口。



注解的提取：前面把标签比作注解，现在我们想要检阅标签的内容怎么办？
使用反射技术

注解通过反射获取。
1.可以通过Class对象的isAnnotationPresent()方法判断它是否应用了某个注解
2.通过getAnnotation()方法获取Annotation对象/或者getAnnotations()


注解是一系列元数据，它提供数据来解释程序代码，但是它并非所解释代码本身的一部分，对代码的运行没有直接影响
作用：
1.提供信息给编译器：编译器可以利用注解来探测错误和警告信息
2.编译阶段时的处理：软件工具可以利用注解信息来生成代码，HTML文档等
3.运行时处理：某些注解可以在程序运行时接受代码的提取

当开发者使用了Annotation 修饰了类、方法、Field 等成员之后，这些 Annotation 不会自己生效，必须由开发者提供相应的代码来提取并处理 Annotation 信息。这些处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool)。
